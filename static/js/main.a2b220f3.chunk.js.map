{"version":3,"sources":["actions/index.js","reducers/index.js","sagas/index.js","containers/App.js","serviceWorker.js","index.js"],"names":["ActionTypes","FETCHED_RATES","REQUESTED_RATES","REQUESTED_RATES_SUCCEEDED","REQUESTED_RATES_FAILED","fetchRates","type","requestRates","requestRatesSuccess","data","requestRatesError","error","initialState","isLoading","reducer","state","arguments","length","undefined","action","Object","objectSpread","rootSaga","URL","concat","regenerator_default","a","wrap","_context","prev","next","put","call","fetch","then","res","json","sent","t0","message","stop","_marked","this","_context2","takeLatest","_marked2","rates","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","asyncFetch","asyncToGenerator","mark","_callee","response","ok","abrupt","console","log","getRates","err","handleFetchRates","dispatch","handleTextChange","e","setState","amount","target","value","react_default","createElement","className","onChange","toString","onClick","Component","connect","Boolean","window","location","hostname","match","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","saga","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2b220f3.chunk.js","sourcesContent":["export const ActionTypes = {\n  FETCHED_RATES: 'FETCHED_RATES',\n  REQUESTED_RATES: 'REQUESTED_RATES',\n  REQUESTED_RATES_SUCCEEDED: 'REQUESTED_RATES_SUCCEEDED',\n  REQUESTED_RATES_FAILED: 'REQUESTED_RATES_FAILED',\n};\n\nexport const fetchRates = () => {\n  return { type: ActionTypes.FETCHED_RATES };\n};\n\nexport const requestRates = () => {\n  return { type: ActionTypes.REQUESTED_RATES };\n};\n\nexport const requestRatesSuccess = data => {\n  return { type: ActionTypes.REQUESTED_RATES_SUCCEEDED, data };\n};\n\nexport const requestRatesError = error => {\n  return { type: ActionTypes.REQUESTED_RATES_FAILED, error };\n};\n","import { ActionTypes } from '../actions';\n\nconst initialState = {\n  data: {},\n  isLoading: false,\n  error: false,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n  case ActionTypes.REQUESTED_RATES:\n    return {\n      ...state,\n      isLoading: true,\n      error: false,\n    };\n  case ActionTypes.REQUESTED_RATES_SUCCEEDED:\n    return {\n      data: action.data,\n      isLoading: false,\n      error: false,\n    };\n  case ActionTypes.REQUESTED_RATES_FAILED:\n    return {\n      ...state,\n      isLoading: false,\n      error: true,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default reducer;\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport {\n  ActionTypes,\n  requestRates,\n  requestRatesSuccess,\n  requestRatesError,\n} from '../actions';\n\nconst APP_ID = '314315a90b8243d5bb2c1060cd7c738b';\n//could be BASE const &base=${BASE}\nconst URL = `https://openexchangerates.org/api/latest.json?app_id=${APP_ID}`;\n\n/*function* fetchRates(action) {\n    try {\n        // const rates = yield call(Api.fetchRates, action.payload.userId);\n        // yield put({type: \"FETCH_SUCCEEDED\", rates: rates});\n    } catch (e) {\n        yield put({type: \"FETCH_FAILED\", message: e.message});\n    }\n}*/\n\nfunction* fetchRates() {\n  try {\n    yield put(requestRates());\n    const data = yield call(() => {\n      return fetch(URL)\n        .then(res => res.json());\n    }\n    );\n    yield put(requestRatesSuccess(data));\n  } catch (error) {\n    yield put(requestRatesError(error.message));\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(ActionTypes.FETCHED_RATES, fetchRates);\n}\n\nexport default rootSaga;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchRates } from '../actions';\nimport '../App.scss';\n\nconst base = 'USD';\n\nconst rates = {\n  GBP: 0.77256,\n  EUR: 0.882807\n};\n\nconst APP_ID = '314315a90b8243d5bb2c1060cd7c738b';\n//could be BASE const &base=${BASE}\nconst URL = `https://openexchangerates.org/api/latest.json?app_id=${APP_ID}`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { amount: null };\n  }\n\n    asyncFetch = async () => {\n      try {\n        const response = await fetch(URL);\n        if(response.ok){\n          return await response.json();\n        }\n      } catch(error) {\n        console.log(error);\n      }\n    };\n\n  getRates = () => {\n    this.asyncFetch().then(\n      res => console.log('successfully fetched', res),\n      err => console.log(err)\n    );\n  };\n\n  handleFetchRates = () => {\n    this.props.dispatch(fetchRates());\n  };\n\n  handleTextChange = e => {\n    this.setState({ amount: e.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"phoneContainer\">\n            <div className=\"App-row\">\n              <div className=\"App-row__label\">{base}</div>\n              <div>-<input\n                type=\"number\"\n                onChange={this.handleTextChange}\n              /></div>\n            </div>\n            <div className=\"App-row\">\n              <div className=\"App-row__label\">GBP</div>\n              <div>+{this.state.amount * rates.GBP}</div>\n            </div>\n            <div className=\"App-row\">\n              <div className=\"App-row__label\">EUR</div>\n              <div>+{this.state.amount * rates.EUR}</div>\n            </div>\n            <div>amount to change {this.state.amount} {this.props.isLoading.toString()}</div>\n\n            <button onClick={this.getRates}>Fetch</button>\n            <button onClick={this.handleFetchRates}>Fetch Saga</button>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoading: state.isLoading\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducer from './reducers';\nimport saga from './sagas';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(sagaMiddleware),\n  )\n);\n\nsagaMiddleware.run(saga);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}